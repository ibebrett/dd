{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CoolGuyList","react_default","a","createElement","this","props","guys","map","n","i","key","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentName","onChange","bind","assertThisInitialized","onSubmit","e","setState","objectSpread","target","value","preventDefault","concat","toConsumableArray","className","type","name","App_CoolGuyList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAGMA,0LAEF,OACEC,EAAAC,EAAAC,cAAA,UACGC,KAAKC,MAAMC,KAAKC,IAAI,SAACC,EAAGC,GAAJ,OACnBR,EAAAC,EAAAC,cAAA,MAAIO,IAAKD,GAAID,aALGG,cA2DXC,cA9Cb,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAQ,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAd,KAAMC,KACDc,MAAQ,CAAEC,YAAa,GAAId,KAAM,CAAC,UAEvCO,EAAKQ,SAAWR,EAAKQ,SAASC,KAAdR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAChBA,EAAKW,SAAWX,EAAKW,SAASF,KAAdR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KALCA,wEAQVY,GACPrB,KAAKsB,SAALZ,OAAAa,EAAA,EAAAb,CAAA,GAAmBV,KAAKe,MAAxB,CAA+BC,YAAaK,EAAEG,OAAOC,0CAG9CJ,GACPA,EAAEK,iBAC6B,KAA3B1B,KAAKe,MAAMC,aAGfhB,KAAKsB,SAALZ,OAAAa,EAAA,EAAAb,CAAA,GACKV,KAAKe,MADV,CAEEC,YAAa,GACbd,KAAI,GAAAyB,OAAAjB,OAAAkB,EAAA,EAAAlB,CAAMV,KAAKe,MAAMb,MAAjB,CAAuBF,KAAKe,MAAMC,kDAKxC,OACEnB,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,QAAMqB,SAAUpB,KAAKoB,UACnBvB,EAAAC,EAAAC,cAAA,qBAEEF,EAAAC,EAAAC,cAAA,SACE+B,KAAK,OACLC,KAAK,OACLN,MAAOzB,KAAKe,MAAMC,YAClBC,SAAUjB,KAAKiB,YAGnBpB,EAAAC,EAAAC,cAAA,SAAO+B,KAAK,SAASL,MAAM,YAE7B5B,EAAAC,EAAAC,cAACiC,EAAD,CAAa9B,KAAMF,KAAKe,MAAMb,eAzCpBK,aCHE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8878df0a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass CoolGuyList extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.guys.map((n, i) => (\n          <li key={i}>{n}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { currentName: \"\", guys: [\"Sally\"] };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({ ...this.state, currentName: e.target.value });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    if (this.state.currentName === \"\") {\n      return;\n    }\n    this.setState({\n      ...this.state,\n      currentName: \"\",\n      guys: [...this.state.guys, this.state.currentName]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Cool Guy List</h1>\n        <form onSubmit={this.onSubmit}>\n          <label>\n            Name:\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={this.state.currentName}\n              onChange={this.onChange}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <CoolGuyList guys={this.state.guys} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}